// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"andurar.api/ent/bookings"
	"andurar.api/ent/predicate"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBookings = "Bookings"
	TypeTodo     = "Todo"
)

// BookingsMutation represents an operation that mutates the Bookings nodes in the graph.
type BookingsMutation struct {
	config
	op               Op
	typ              string
	id               *int
	full_name        *string
	email            *string
	phone            *string
	room             *string
	no_of_guests     *string
	check_in         *string
	check_out        *string
	pickup           *bookings.Pickup
	status           *bookings.Status
	payment_status   *bookings.PaymentStatus
	special_requests *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Bookings, error)
	predicates       []predicate.Bookings
}

var _ ent.Mutation = (*BookingsMutation)(nil)

// bookingsOption allows management of the mutation configuration using functional options.
type bookingsOption func(*BookingsMutation)

// newBookingsMutation creates new mutation for the Bookings entity.
func newBookingsMutation(c config, op Op, opts ...bookingsOption) *BookingsMutation {
	m := &BookingsMutation{
		config:        c,
		op:            op,
		typ:           TypeBookings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookingsID sets the ID field of the mutation.
func withBookingsID(id int) bookingsOption {
	return func(m *BookingsMutation) {
		var (
			err   error
			once  sync.Once
			value *Bookings
		)
		m.oldValue = func(ctx context.Context) (*Bookings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bookings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBookings sets the old Bookings of the mutation.
func withBookings(node *Bookings) bookingsOption {
	return func(m *BookingsMutation) {
		m.oldValue = func(context.Context) (*Bookings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BookingsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BookingsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bookings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFullName sets the "full_name" field.
func (m *BookingsMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *BookingsMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ClearFullName clears the value of the "full_name" field.
func (m *BookingsMutation) ClearFullName() {
	m.full_name = nil
	m.clearedFields[bookings.FieldFullName] = struct{}{}
}

// FullNameCleared returns if the "full_name" field was cleared in this mutation.
func (m *BookingsMutation) FullNameCleared() bool {
	_, ok := m.clearedFields[bookings.FieldFullName]
	return ok
}

// ResetFullName resets all changes to the "full_name" field.
func (m *BookingsMutation) ResetFullName() {
	m.full_name = nil
	delete(m.clearedFields, bookings.FieldFullName)
}

// SetEmail sets the "email" field.
func (m *BookingsMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *BookingsMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *BookingsMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[bookings.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *BookingsMutation) EmailCleared() bool {
	_, ok := m.clearedFields[bookings.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *BookingsMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, bookings.FieldEmail)
}

// SetPhone sets the "phone" field.
func (m *BookingsMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *BookingsMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *BookingsMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[bookings.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *BookingsMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[bookings.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *BookingsMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, bookings.FieldPhone)
}

// SetRoom sets the "room" field.
func (m *BookingsMutation) SetRoom(s string) {
	m.room = &s
}

// Room returns the value of the "room" field in the mutation.
func (m *BookingsMutation) Room() (r string, exists bool) {
	v := m.room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoom returns the old "room" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldRoom(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoom is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoom requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoom: %w", err)
	}
	return oldValue.Room, nil
}

// ClearRoom clears the value of the "room" field.
func (m *BookingsMutation) ClearRoom() {
	m.room = nil
	m.clearedFields[bookings.FieldRoom] = struct{}{}
}

// RoomCleared returns if the "room" field was cleared in this mutation.
func (m *BookingsMutation) RoomCleared() bool {
	_, ok := m.clearedFields[bookings.FieldRoom]
	return ok
}

// ResetRoom resets all changes to the "room" field.
func (m *BookingsMutation) ResetRoom() {
	m.room = nil
	delete(m.clearedFields, bookings.FieldRoom)
}

// SetNoOfGuests sets the "no_of_guests" field.
func (m *BookingsMutation) SetNoOfGuests(s string) {
	m.no_of_guests = &s
}

// NoOfGuests returns the value of the "no_of_guests" field in the mutation.
func (m *BookingsMutation) NoOfGuests() (r string, exists bool) {
	v := m.no_of_guests
	if v == nil {
		return
	}
	return *v, true
}

// OldNoOfGuests returns the old "no_of_guests" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldNoOfGuests(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNoOfGuests is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNoOfGuests requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNoOfGuests: %w", err)
	}
	return oldValue.NoOfGuests, nil
}

// ClearNoOfGuests clears the value of the "no_of_guests" field.
func (m *BookingsMutation) ClearNoOfGuests() {
	m.no_of_guests = nil
	m.clearedFields[bookings.FieldNoOfGuests] = struct{}{}
}

// NoOfGuestsCleared returns if the "no_of_guests" field was cleared in this mutation.
func (m *BookingsMutation) NoOfGuestsCleared() bool {
	_, ok := m.clearedFields[bookings.FieldNoOfGuests]
	return ok
}

// ResetNoOfGuests resets all changes to the "no_of_guests" field.
func (m *BookingsMutation) ResetNoOfGuests() {
	m.no_of_guests = nil
	delete(m.clearedFields, bookings.FieldNoOfGuests)
}

// SetCheckIn sets the "check_in" field.
func (m *BookingsMutation) SetCheckIn(s string) {
	m.check_in = &s
}

// CheckIn returns the value of the "check_in" field in the mutation.
func (m *BookingsMutation) CheckIn() (r string, exists bool) {
	v := m.check_in
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckIn returns the old "check_in" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldCheckIn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckIn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckIn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckIn: %w", err)
	}
	return oldValue.CheckIn, nil
}

// ClearCheckIn clears the value of the "check_in" field.
func (m *BookingsMutation) ClearCheckIn() {
	m.check_in = nil
	m.clearedFields[bookings.FieldCheckIn] = struct{}{}
}

// CheckInCleared returns if the "check_in" field was cleared in this mutation.
func (m *BookingsMutation) CheckInCleared() bool {
	_, ok := m.clearedFields[bookings.FieldCheckIn]
	return ok
}

// ResetCheckIn resets all changes to the "check_in" field.
func (m *BookingsMutation) ResetCheckIn() {
	m.check_in = nil
	delete(m.clearedFields, bookings.FieldCheckIn)
}

// SetCheckOut sets the "check_out" field.
func (m *BookingsMutation) SetCheckOut(s string) {
	m.check_out = &s
}

// CheckOut returns the value of the "check_out" field in the mutation.
func (m *BookingsMutation) CheckOut() (r string, exists bool) {
	v := m.check_out
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckOut returns the old "check_out" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldCheckOut(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckOut is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckOut requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckOut: %w", err)
	}
	return oldValue.CheckOut, nil
}

// ClearCheckOut clears the value of the "check_out" field.
func (m *BookingsMutation) ClearCheckOut() {
	m.check_out = nil
	m.clearedFields[bookings.FieldCheckOut] = struct{}{}
}

// CheckOutCleared returns if the "check_out" field was cleared in this mutation.
func (m *BookingsMutation) CheckOutCleared() bool {
	_, ok := m.clearedFields[bookings.FieldCheckOut]
	return ok
}

// ResetCheckOut resets all changes to the "check_out" field.
func (m *BookingsMutation) ResetCheckOut() {
	m.check_out = nil
	delete(m.clearedFields, bookings.FieldCheckOut)
}

// SetPickup sets the "pickup" field.
func (m *BookingsMutation) SetPickup(b bookings.Pickup) {
	m.pickup = &b
}

// Pickup returns the value of the "pickup" field in the mutation.
func (m *BookingsMutation) Pickup() (r bookings.Pickup, exists bool) {
	v := m.pickup
	if v == nil {
		return
	}
	return *v, true
}

// OldPickup returns the old "pickup" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldPickup(ctx context.Context) (v bookings.Pickup, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPickup is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPickup requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPickup: %w", err)
	}
	return oldValue.Pickup, nil
}

// ClearPickup clears the value of the "pickup" field.
func (m *BookingsMutation) ClearPickup() {
	m.pickup = nil
	m.clearedFields[bookings.FieldPickup] = struct{}{}
}

// PickupCleared returns if the "pickup" field was cleared in this mutation.
func (m *BookingsMutation) PickupCleared() bool {
	_, ok := m.clearedFields[bookings.FieldPickup]
	return ok
}

// ResetPickup resets all changes to the "pickup" field.
func (m *BookingsMutation) ResetPickup() {
	m.pickup = nil
	delete(m.clearedFields, bookings.FieldPickup)
}

// SetStatus sets the "status" field.
func (m *BookingsMutation) SetStatus(b bookings.Status) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *BookingsMutation) Status() (r bookings.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldStatus(ctx context.Context) (v bookings.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *BookingsMutation) ResetStatus() {
	m.status = nil
}

// SetPaymentStatus sets the "payment_status" field.
func (m *BookingsMutation) SetPaymentStatus(bs bookings.PaymentStatus) {
	m.payment_status = &bs
}

// PaymentStatus returns the value of the "payment_status" field in the mutation.
func (m *BookingsMutation) PaymentStatus() (r bookings.PaymentStatus, exists bool) {
	v := m.payment_status
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentStatus returns the old "payment_status" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldPaymentStatus(ctx context.Context) (v bookings.PaymentStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentStatus: %w", err)
	}
	return oldValue.PaymentStatus, nil
}

// ResetPaymentStatus resets all changes to the "payment_status" field.
func (m *BookingsMutation) ResetPaymentStatus() {
	m.payment_status = nil
}

// SetSpecialRequests sets the "special_requests" field.
func (m *BookingsMutation) SetSpecialRequests(s string) {
	m.special_requests = &s
}

// SpecialRequests returns the value of the "special_requests" field in the mutation.
func (m *BookingsMutation) SpecialRequests() (r string, exists bool) {
	v := m.special_requests
	if v == nil {
		return
	}
	return *v, true
}

// OldSpecialRequests returns the old "special_requests" field's value of the Bookings entity.
// If the Bookings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BookingsMutation) OldSpecialRequests(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpecialRequests is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpecialRequests requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpecialRequests: %w", err)
	}
	return oldValue.SpecialRequests, nil
}

// ClearSpecialRequests clears the value of the "special_requests" field.
func (m *BookingsMutation) ClearSpecialRequests() {
	m.special_requests = nil
	m.clearedFields[bookings.FieldSpecialRequests] = struct{}{}
}

// SpecialRequestsCleared returns if the "special_requests" field was cleared in this mutation.
func (m *BookingsMutation) SpecialRequestsCleared() bool {
	_, ok := m.clearedFields[bookings.FieldSpecialRequests]
	return ok
}

// ResetSpecialRequests resets all changes to the "special_requests" field.
func (m *BookingsMutation) ResetSpecialRequests() {
	m.special_requests = nil
	delete(m.clearedFields, bookings.FieldSpecialRequests)
}

// Where appends a list predicates to the BookingsMutation builder.
func (m *BookingsMutation) Where(ps ...predicate.Bookings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BookingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BookingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bookings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BookingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BookingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bookings).
func (m *BookingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BookingsMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.full_name != nil {
		fields = append(fields, bookings.FieldFullName)
	}
	if m.email != nil {
		fields = append(fields, bookings.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, bookings.FieldPhone)
	}
	if m.room != nil {
		fields = append(fields, bookings.FieldRoom)
	}
	if m.no_of_guests != nil {
		fields = append(fields, bookings.FieldNoOfGuests)
	}
	if m.check_in != nil {
		fields = append(fields, bookings.FieldCheckIn)
	}
	if m.check_out != nil {
		fields = append(fields, bookings.FieldCheckOut)
	}
	if m.pickup != nil {
		fields = append(fields, bookings.FieldPickup)
	}
	if m.status != nil {
		fields = append(fields, bookings.FieldStatus)
	}
	if m.payment_status != nil {
		fields = append(fields, bookings.FieldPaymentStatus)
	}
	if m.special_requests != nil {
		fields = append(fields, bookings.FieldSpecialRequests)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BookingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bookings.FieldFullName:
		return m.FullName()
	case bookings.FieldEmail:
		return m.Email()
	case bookings.FieldPhone:
		return m.Phone()
	case bookings.FieldRoom:
		return m.Room()
	case bookings.FieldNoOfGuests:
		return m.NoOfGuests()
	case bookings.FieldCheckIn:
		return m.CheckIn()
	case bookings.FieldCheckOut:
		return m.CheckOut()
	case bookings.FieldPickup:
		return m.Pickup()
	case bookings.FieldStatus:
		return m.Status()
	case bookings.FieldPaymentStatus:
		return m.PaymentStatus()
	case bookings.FieldSpecialRequests:
		return m.SpecialRequests()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BookingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bookings.FieldFullName:
		return m.OldFullName(ctx)
	case bookings.FieldEmail:
		return m.OldEmail(ctx)
	case bookings.FieldPhone:
		return m.OldPhone(ctx)
	case bookings.FieldRoom:
		return m.OldRoom(ctx)
	case bookings.FieldNoOfGuests:
		return m.OldNoOfGuests(ctx)
	case bookings.FieldCheckIn:
		return m.OldCheckIn(ctx)
	case bookings.FieldCheckOut:
		return m.OldCheckOut(ctx)
	case bookings.FieldPickup:
		return m.OldPickup(ctx)
	case bookings.FieldStatus:
		return m.OldStatus(ctx)
	case bookings.FieldPaymentStatus:
		return m.OldPaymentStatus(ctx)
	case bookings.FieldSpecialRequests:
		return m.OldSpecialRequests(ctx)
	}
	return nil, fmt.Errorf("unknown Bookings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bookings.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case bookings.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case bookings.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case bookings.FieldRoom:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoom(v)
		return nil
	case bookings.FieldNoOfGuests:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNoOfGuests(v)
		return nil
	case bookings.FieldCheckIn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckIn(v)
		return nil
	case bookings.FieldCheckOut:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckOut(v)
		return nil
	case bookings.FieldPickup:
		v, ok := value.(bookings.Pickup)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPickup(v)
		return nil
	case bookings.FieldStatus:
		v, ok := value.(bookings.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case bookings.FieldPaymentStatus:
		v, ok := value.(bookings.PaymentStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentStatus(v)
		return nil
	case bookings.FieldSpecialRequests:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpecialRequests(v)
		return nil
	}
	return fmt.Errorf("unknown Bookings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BookingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BookingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BookingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bookings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BookingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bookings.FieldFullName) {
		fields = append(fields, bookings.FieldFullName)
	}
	if m.FieldCleared(bookings.FieldEmail) {
		fields = append(fields, bookings.FieldEmail)
	}
	if m.FieldCleared(bookings.FieldPhone) {
		fields = append(fields, bookings.FieldPhone)
	}
	if m.FieldCleared(bookings.FieldRoom) {
		fields = append(fields, bookings.FieldRoom)
	}
	if m.FieldCleared(bookings.FieldNoOfGuests) {
		fields = append(fields, bookings.FieldNoOfGuests)
	}
	if m.FieldCleared(bookings.FieldCheckIn) {
		fields = append(fields, bookings.FieldCheckIn)
	}
	if m.FieldCleared(bookings.FieldCheckOut) {
		fields = append(fields, bookings.FieldCheckOut)
	}
	if m.FieldCleared(bookings.FieldPickup) {
		fields = append(fields, bookings.FieldPickup)
	}
	if m.FieldCleared(bookings.FieldSpecialRequests) {
		fields = append(fields, bookings.FieldSpecialRequests)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BookingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookingsMutation) ClearField(name string) error {
	switch name {
	case bookings.FieldFullName:
		m.ClearFullName()
		return nil
	case bookings.FieldEmail:
		m.ClearEmail()
		return nil
	case bookings.FieldPhone:
		m.ClearPhone()
		return nil
	case bookings.FieldRoom:
		m.ClearRoom()
		return nil
	case bookings.FieldNoOfGuests:
		m.ClearNoOfGuests()
		return nil
	case bookings.FieldCheckIn:
		m.ClearCheckIn()
		return nil
	case bookings.FieldCheckOut:
		m.ClearCheckOut()
		return nil
	case bookings.FieldPickup:
		m.ClearPickup()
		return nil
	case bookings.FieldSpecialRequests:
		m.ClearSpecialRequests()
		return nil
	}
	return fmt.Errorf("unknown Bookings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BookingsMutation) ResetField(name string) error {
	switch name {
	case bookings.FieldFullName:
		m.ResetFullName()
		return nil
	case bookings.FieldEmail:
		m.ResetEmail()
		return nil
	case bookings.FieldPhone:
		m.ResetPhone()
		return nil
	case bookings.FieldRoom:
		m.ResetRoom()
		return nil
	case bookings.FieldNoOfGuests:
		m.ResetNoOfGuests()
		return nil
	case bookings.FieldCheckIn:
		m.ResetCheckIn()
		return nil
	case bookings.FieldCheckOut:
		m.ResetCheckOut()
		return nil
	case bookings.FieldPickup:
		m.ResetPickup()
		return nil
	case bookings.FieldStatus:
		m.ResetStatus()
		return nil
	case bookings.FieldPaymentStatus:
		m.ResetPaymentStatus()
		return nil
	case bookings.FieldSpecialRequests:
		m.ResetSpecialRequests()
		return nil
	}
	return fmt.Errorf("unknown Bookings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BookingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BookingsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BookingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BookingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BookingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BookingsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BookingsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Bookings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BookingsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Bookings edge %s", name)
}

// TodoMutation represents an operation that mutates the Todo nodes in the graph.
type TodoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Todo, error)
	predicates    []predicate.Todo
}

var _ ent.Mutation = (*TodoMutation)(nil)

// todoOption allows management of the mutation configuration using functional options.
type todoOption func(*TodoMutation)

// newTodoMutation creates new mutation for the Todo entity.
func newTodoMutation(c config, op Op, opts ...todoOption) *TodoMutation {
	m := &TodoMutation{
		config:        c,
		op:            op,
		typ:           TypeTodo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTodoID sets the ID field of the mutation.
func withTodoID(id int) todoOption {
	return func(m *TodoMutation) {
		var (
			err   error
			once  sync.Once
			value *Todo
		)
		m.oldValue = func(ctx context.Context) (*Todo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Todo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTodo sets the old Todo of the mutation.
func withTodo(node *Todo) todoOption {
	return func(m *TodoMutation) {
		m.oldValue = func(context.Context) (*Todo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TodoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TodoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TodoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TodoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Todo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the TodoMutation builder.
func (m *TodoMutation) Where(ps ...predicate.Todo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TodoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TodoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Todo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TodoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TodoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Todo).
func (m *TodoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TodoMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TodoMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TodoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Todo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TodoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TodoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TodoMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Todo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TodoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TodoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TodoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Todo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TodoMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Todo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TodoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TodoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TodoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TodoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TodoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TodoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TodoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Todo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TodoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Todo edge %s", name)
}

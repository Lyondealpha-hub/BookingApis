// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"andurar.api/ent/bookings"
	"andurar.api/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookingsUpdate is the builder for updating Bookings entities.
type BookingsUpdate struct {
	config
	hooks     []Hook
	mutation  *BookingsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BookingsUpdate builder.
func (bu *BookingsUpdate) Where(ps ...predicate.Bookings) *BookingsUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetFullName sets the "full_name" field.
func (bu *BookingsUpdate) SetFullName(s string) *BookingsUpdate {
	bu.mutation.SetFullName(s)
	return bu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableFullName(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetFullName(*s)
	}
	return bu
}

// ClearFullName clears the value of the "full_name" field.
func (bu *BookingsUpdate) ClearFullName() *BookingsUpdate {
	bu.mutation.ClearFullName()
	return bu
}

// SetEmail sets the "email" field.
func (bu *BookingsUpdate) SetEmail(s string) *BookingsUpdate {
	bu.mutation.SetEmail(s)
	return bu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableEmail(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetEmail(*s)
	}
	return bu
}

// ClearEmail clears the value of the "email" field.
func (bu *BookingsUpdate) ClearEmail() *BookingsUpdate {
	bu.mutation.ClearEmail()
	return bu
}

// SetPhone sets the "phone" field.
func (bu *BookingsUpdate) SetPhone(s string) *BookingsUpdate {
	bu.mutation.SetPhone(s)
	return bu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillablePhone(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetPhone(*s)
	}
	return bu
}

// ClearPhone clears the value of the "phone" field.
func (bu *BookingsUpdate) ClearPhone() *BookingsUpdate {
	bu.mutation.ClearPhone()
	return bu
}

// SetRoom sets the "room" field.
func (bu *BookingsUpdate) SetRoom(s string) *BookingsUpdate {
	bu.mutation.SetRoom(s)
	return bu
}

// SetNillableRoom sets the "room" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableRoom(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetRoom(*s)
	}
	return bu
}

// ClearRoom clears the value of the "room" field.
func (bu *BookingsUpdate) ClearRoom() *BookingsUpdate {
	bu.mutation.ClearRoom()
	return bu
}

// SetNoOfGuests sets the "no_of_guests" field.
func (bu *BookingsUpdate) SetNoOfGuests(s string) *BookingsUpdate {
	bu.mutation.SetNoOfGuests(s)
	return bu
}

// SetNillableNoOfGuests sets the "no_of_guests" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableNoOfGuests(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetNoOfGuests(*s)
	}
	return bu
}

// ClearNoOfGuests clears the value of the "no_of_guests" field.
func (bu *BookingsUpdate) ClearNoOfGuests() *BookingsUpdate {
	bu.mutation.ClearNoOfGuests()
	return bu
}

// SetCheckIn sets the "check_in" field.
func (bu *BookingsUpdate) SetCheckIn(s string) *BookingsUpdate {
	bu.mutation.SetCheckIn(s)
	return bu
}

// SetNillableCheckIn sets the "check_in" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableCheckIn(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetCheckIn(*s)
	}
	return bu
}

// ClearCheckIn clears the value of the "check_in" field.
func (bu *BookingsUpdate) ClearCheckIn() *BookingsUpdate {
	bu.mutation.ClearCheckIn()
	return bu
}

// SetCheckOut sets the "check_out" field.
func (bu *BookingsUpdate) SetCheckOut(s string) *BookingsUpdate {
	bu.mutation.SetCheckOut(s)
	return bu
}

// SetNillableCheckOut sets the "check_out" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableCheckOut(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetCheckOut(*s)
	}
	return bu
}

// ClearCheckOut clears the value of the "check_out" field.
func (bu *BookingsUpdate) ClearCheckOut() *BookingsUpdate {
	bu.mutation.ClearCheckOut()
	return bu
}

// SetPickup sets the "pickup" field.
func (bu *BookingsUpdate) SetPickup(b bookings.Pickup) *BookingsUpdate {
	bu.mutation.SetPickup(b)
	return bu
}

// SetNillablePickup sets the "pickup" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillablePickup(b *bookings.Pickup) *BookingsUpdate {
	if b != nil {
		bu.SetPickup(*b)
	}
	return bu
}

// ClearPickup clears the value of the "pickup" field.
func (bu *BookingsUpdate) ClearPickup() *BookingsUpdate {
	bu.mutation.ClearPickup()
	return bu
}

// SetStatus sets the "status" field.
func (bu *BookingsUpdate) SetStatus(b bookings.Status) *BookingsUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableStatus(b *bookings.Status) *BookingsUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetPaymentStatus sets the "payment_status" field.
func (bu *BookingsUpdate) SetPaymentStatus(bs bookings.PaymentStatus) *BookingsUpdate {
	bu.mutation.SetPaymentStatus(bs)
	return bu
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillablePaymentStatus(bs *bookings.PaymentStatus) *BookingsUpdate {
	if bs != nil {
		bu.SetPaymentStatus(*bs)
	}
	return bu
}

// SetSpecialRequests sets the "special_requests" field.
func (bu *BookingsUpdate) SetSpecialRequests(s string) *BookingsUpdate {
	bu.mutation.SetSpecialRequests(s)
	return bu
}

// SetNillableSpecialRequests sets the "special_requests" field if the given value is not nil.
func (bu *BookingsUpdate) SetNillableSpecialRequests(s *string) *BookingsUpdate {
	if s != nil {
		bu.SetSpecialRequests(*s)
	}
	return bu
}

// ClearSpecialRequests clears the value of the "special_requests" field.
func (bu *BookingsUpdate) ClearSpecialRequests() *BookingsUpdate {
	bu.mutation.ClearSpecialRequests()
	return bu
}

// Mutation returns the BookingsMutation object of the builder.
func (bu *BookingsUpdate) Mutation() *BookingsMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookingsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookingsUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookingsUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookingsUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookingsUpdate) check() error {
	if v, ok := bu.mutation.Pickup(); ok {
		if err := bookings.PickupValidator(v); err != nil {
			return &ValidationError{Name: "pickup", err: fmt.Errorf(`ent: validator failed for field "Bookings.pickup": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Status(); ok {
		if err := bookings.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bookings.status": %w`, err)}
		}
	}
	if v, ok := bu.mutation.PaymentStatus(); ok {
		if err := bookings.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Bookings.payment_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BookingsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BookingsUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BookingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookings.Table, bookings.Columns, sqlgraph.NewFieldSpec(bookings.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.FullName(); ok {
		_spec.SetField(bookings.FieldFullName, field.TypeString, value)
	}
	if bu.mutation.FullNameCleared() {
		_spec.ClearField(bookings.FieldFullName, field.TypeString)
	}
	if value, ok := bu.mutation.Email(); ok {
		_spec.SetField(bookings.FieldEmail, field.TypeString, value)
	}
	if bu.mutation.EmailCleared() {
		_spec.ClearField(bookings.FieldEmail, field.TypeString)
	}
	if value, ok := bu.mutation.Phone(); ok {
		_spec.SetField(bookings.FieldPhone, field.TypeString, value)
	}
	if bu.mutation.PhoneCleared() {
		_spec.ClearField(bookings.FieldPhone, field.TypeString)
	}
	if value, ok := bu.mutation.Room(); ok {
		_spec.SetField(bookings.FieldRoom, field.TypeString, value)
	}
	if bu.mutation.RoomCleared() {
		_spec.ClearField(bookings.FieldRoom, field.TypeString)
	}
	if value, ok := bu.mutation.NoOfGuests(); ok {
		_spec.SetField(bookings.FieldNoOfGuests, field.TypeString, value)
	}
	if bu.mutation.NoOfGuestsCleared() {
		_spec.ClearField(bookings.FieldNoOfGuests, field.TypeString)
	}
	if value, ok := bu.mutation.CheckIn(); ok {
		_spec.SetField(bookings.FieldCheckIn, field.TypeString, value)
	}
	if bu.mutation.CheckInCleared() {
		_spec.ClearField(bookings.FieldCheckIn, field.TypeString)
	}
	if value, ok := bu.mutation.CheckOut(); ok {
		_spec.SetField(bookings.FieldCheckOut, field.TypeString, value)
	}
	if bu.mutation.CheckOutCleared() {
		_spec.ClearField(bookings.FieldCheckOut, field.TypeString)
	}
	if value, ok := bu.mutation.Pickup(); ok {
		_spec.SetField(bookings.FieldPickup, field.TypeEnum, value)
	}
	if bu.mutation.PickupCleared() {
		_spec.ClearField(bookings.FieldPickup, field.TypeEnum)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(bookings.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.PaymentStatus(); ok {
		_spec.SetField(bookings.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.SpecialRequests(); ok {
		_spec.SetField(bookings.FieldSpecialRequests, field.TypeString, value)
	}
	if bu.mutation.SpecialRequestsCleared() {
		_spec.ClearField(bookings.FieldSpecialRequests, field.TypeString)
	}
	_spec.AddModifiers(bu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookingsUpdateOne is the builder for updating a single Bookings entity.
type BookingsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BookingsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetFullName sets the "full_name" field.
func (buo *BookingsUpdateOne) SetFullName(s string) *BookingsUpdateOne {
	buo.mutation.SetFullName(s)
	return buo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableFullName(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetFullName(*s)
	}
	return buo
}

// ClearFullName clears the value of the "full_name" field.
func (buo *BookingsUpdateOne) ClearFullName() *BookingsUpdateOne {
	buo.mutation.ClearFullName()
	return buo
}

// SetEmail sets the "email" field.
func (buo *BookingsUpdateOne) SetEmail(s string) *BookingsUpdateOne {
	buo.mutation.SetEmail(s)
	return buo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableEmail(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetEmail(*s)
	}
	return buo
}

// ClearEmail clears the value of the "email" field.
func (buo *BookingsUpdateOne) ClearEmail() *BookingsUpdateOne {
	buo.mutation.ClearEmail()
	return buo
}

// SetPhone sets the "phone" field.
func (buo *BookingsUpdateOne) SetPhone(s string) *BookingsUpdateOne {
	buo.mutation.SetPhone(s)
	return buo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillablePhone(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetPhone(*s)
	}
	return buo
}

// ClearPhone clears the value of the "phone" field.
func (buo *BookingsUpdateOne) ClearPhone() *BookingsUpdateOne {
	buo.mutation.ClearPhone()
	return buo
}

// SetRoom sets the "room" field.
func (buo *BookingsUpdateOne) SetRoom(s string) *BookingsUpdateOne {
	buo.mutation.SetRoom(s)
	return buo
}

// SetNillableRoom sets the "room" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableRoom(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetRoom(*s)
	}
	return buo
}

// ClearRoom clears the value of the "room" field.
func (buo *BookingsUpdateOne) ClearRoom() *BookingsUpdateOne {
	buo.mutation.ClearRoom()
	return buo
}

// SetNoOfGuests sets the "no_of_guests" field.
func (buo *BookingsUpdateOne) SetNoOfGuests(s string) *BookingsUpdateOne {
	buo.mutation.SetNoOfGuests(s)
	return buo
}

// SetNillableNoOfGuests sets the "no_of_guests" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableNoOfGuests(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetNoOfGuests(*s)
	}
	return buo
}

// ClearNoOfGuests clears the value of the "no_of_guests" field.
func (buo *BookingsUpdateOne) ClearNoOfGuests() *BookingsUpdateOne {
	buo.mutation.ClearNoOfGuests()
	return buo
}

// SetCheckIn sets the "check_in" field.
func (buo *BookingsUpdateOne) SetCheckIn(s string) *BookingsUpdateOne {
	buo.mutation.SetCheckIn(s)
	return buo
}

// SetNillableCheckIn sets the "check_in" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableCheckIn(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetCheckIn(*s)
	}
	return buo
}

// ClearCheckIn clears the value of the "check_in" field.
func (buo *BookingsUpdateOne) ClearCheckIn() *BookingsUpdateOne {
	buo.mutation.ClearCheckIn()
	return buo
}

// SetCheckOut sets the "check_out" field.
func (buo *BookingsUpdateOne) SetCheckOut(s string) *BookingsUpdateOne {
	buo.mutation.SetCheckOut(s)
	return buo
}

// SetNillableCheckOut sets the "check_out" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableCheckOut(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetCheckOut(*s)
	}
	return buo
}

// ClearCheckOut clears the value of the "check_out" field.
func (buo *BookingsUpdateOne) ClearCheckOut() *BookingsUpdateOne {
	buo.mutation.ClearCheckOut()
	return buo
}

// SetPickup sets the "pickup" field.
func (buo *BookingsUpdateOne) SetPickup(b bookings.Pickup) *BookingsUpdateOne {
	buo.mutation.SetPickup(b)
	return buo
}

// SetNillablePickup sets the "pickup" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillablePickup(b *bookings.Pickup) *BookingsUpdateOne {
	if b != nil {
		buo.SetPickup(*b)
	}
	return buo
}

// ClearPickup clears the value of the "pickup" field.
func (buo *BookingsUpdateOne) ClearPickup() *BookingsUpdateOne {
	buo.mutation.ClearPickup()
	return buo
}

// SetStatus sets the "status" field.
func (buo *BookingsUpdateOne) SetStatus(b bookings.Status) *BookingsUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableStatus(b *bookings.Status) *BookingsUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetPaymentStatus sets the "payment_status" field.
func (buo *BookingsUpdateOne) SetPaymentStatus(bs bookings.PaymentStatus) *BookingsUpdateOne {
	buo.mutation.SetPaymentStatus(bs)
	return buo
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillablePaymentStatus(bs *bookings.PaymentStatus) *BookingsUpdateOne {
	if bs != nil {
		buo.SetPaymentStatus(*bs)
	}
	return buo
}

// SetSpecialRequests sets the "special_requests" field.
func (buo *BookingsUpdateOne) SetSpecialRequests(s string) *BookingsUpdateOne {
	buo.mutation.SetSpecialRequests(s)
	return buo
}

// SetNillableSpecialRequests sets the "special_requests" field if the given value is not nil.
func (buo *BookingsUpdateOne) SetNillableSpecialRequests(s *string) *BookingsUpdateOne {
	if s != nil {
		buo.SetSpecialRequests(*s)
	}
	return buo
}

// ClearSpecialRequests clears the value of the "special_requests" field.
func (buo *BookingsUpdateOne) ClearSpecialRequests() *BookingsUpdateOne {
	buo.mutation.ClearSpecialRequests()
	return buo
}

// Mutation returns the BookingsMutation object of the builder.
func (buo *BookingsUpdateOne) Mutation() *BookingsMutation {
	return buo.mutation
}

// Where appends a list predicates to the BookingsUpdate builder.
func (buo *BookingsUpdateOne) Where(ps ...predicate.Bookings) *BookingsUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookingsUpdateOne) Select(field string, fields ...string) *BookingsUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bookings entity.
func (buo *BookingsUpdateOne) Save(ctx context.Context) (*Bookings, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookingsUpdateOne) SaveX(ctx context.Context) *Bookings {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookingsUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookingsUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookingsUpdateOne) check() error {
	if v, ok := buo.mutation.Pickup(); ok {
		if err := bookings.PickupValidator(v); err != nil {
			return &ValidationError{Name: "pickup", err: fmt.Errorf(`ent: validator failed for field "Bookings.pickup": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Status(); ok {
		if err := bookings.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bookings.status": %w`, err)}
		}
	}
	if v, ok := buo.mutation.PaymentStatus(); ok {
		if err := bookings.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Bookings.payment_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BookingsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BookingsUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BookingsUpdateOne) sqlSave(ctx context.Context) (_node *Bookings, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bookings.Table, bookings.Columns, sqlgraph.NewFieldSpec(bookings.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bookings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookings.FieldID)
		for _, f := range fields {
			if !bookings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.FullName(); ok {
		_spec.SetField(bookings.FieldFullName, field.TypeString, value)
	}
	if buo.mutation.FullNameCleared() {
		_spec.ClearField(bookings.FieldFullName, field.TypeString)
	}
	if value, ok := buo.mutation.Email(); ok {
		_spec.SetField(bookings.FieldEmail, field.TypeString, value)
	}
	if buo.mutation.EmailCleared() {
		_spec.ClearField(bookings.FieldEmail, field.TypeString)
	}
	if value, ok := buo.mutation.Phone(); ok {
		_spec.SetField(bookings.FieldPhone, field.TypeString, value)
	}
	if buo.mutation.PhoneCleared() {
		_spec.ClearField(bookings.FieldPhone, field.TypeString)
	}
	if value, ok := buo.mutation.Room(); ok {
		_spec.SetField(bookings.FieldRoom, field.TypeString, value)
	}
	if buo.mutation.RoomCleared() {
		_spec.ClearField(bookings.FieldRoom, field.TypeString)
	}
	if value, ok := buo.mutation.NoOfGuests(); ok {
		_spec.SetField(bookings.FieldNoOfGuests, field.TypeString, value)
	}
	if buo.mutation.NoOfGuestsCleared() {
		_spec.ClearField(bookings.FieldNoOfGuests, field.TypeString)
	}
	if value, ok := buo.mutation.CheckIn(); ok {
		_spec.SetField(bookings.FieldCheckIn, field.TypeString, value)
	}
	if buo.mutation.CheckInCleared() {
		_spec.ClearField(bookings.FieldCheckIn, field.TypeString)
	}
	if value, ok := buo.mutation.CheckOut(); ok {
		_spec.SetField(bookings.FieldCheckOut, field.TypeString, value)
	}
	if buo.mutation.CheckOutCleared() {
		_spec.ClearField(bookings.FieldCheckOut, field.TypeString)
	}
	if value, ok := buo.mutation.Pickup(); ok {
		_spec.SetField(bookings.FieldPickup, field.TypeEnum, value)
	}
	if buo.mutation.PickupCleared() {
		_spec.ClearField(bookings.FieldPickup, field.TypeEnum)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(bookings.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.PaymentStatus(); ok {
		_spec.SetField(bookings.FieldPaymentStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.SpecialRequests(); ok {
		_spec.SetField(bookings.FieldSpecialRequests, field.TypeString, value)
	}
	if buo.mutation.SpecialRequestsCleared() {
		_spec.ClearField(bookings.FieldSpecialRequests, field.TypeString)
	}
	_spec.AddModifiers(buo.modifiers...)
	_node = &Bookings{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"andurar.api/ent/bookings"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookingsCreate is the builder for creating a Bookings entity.
type BookingsCreate struct {
	config
	mutation *BookingsMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (bc *BookingsCreate) SetFullName(s string) *BookingsCreate {
	bc.mutation.SetFullName(s)
	return bc
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableFullName(s *string) *BookingsCreate {
	if s != nil {
		bc.SetFullName(*s)
	}
	return bc
}

// SetEmail sets the "email" field.
func (bc *BookingsCreate) SetEmail(s string) *BookingsCreate {
	bc.mutation.SetEmail(s)
	return bc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableEmail(s *string) *BookingsCreate {
	if s != nil {
		bc.SetEmail(*s)
	}
	return bc
}

// SetPhone sets the "phone" field.
func (bc *BookingsCreate) SetPhone(s string) *BookingsCreate {
	bc.mutation.SetPhone(s)
	return bc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (bc *BookingsCreate) SetNillablePhone(s *string) *BookingsCreate {
	if s != nil {
		bc.SetPhone(*s)
	}
	return bc
}

// SetRoom sets the "room" field.
func (bc *BookingsCreate) SetRoom(s string) *BookingsCreate {
	bc.mutation.SetRoom(s)
	return bc
}

// SetNillableRoom sets the "room" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableRoom(s *string) *BookingsCreate {
	if s != nil {
		bc.SetRoom(*s)
	}
	return bc
}

// SetNoOfGuests sets the "no_of_guests" field.
func (bc *BookingsCreate) SetNoOfGuests(s string) *BookingsCreate {
	bc.mutation.SetNoOfGuests(s)
	return bc
}

// SetNillableNoOfGuests sets the "no_of_guests" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableNoOfGuests(s *string) *BookingsCreate {
	if s != nil {
		bc.SetNoOfGuests(*s)
	}
	return bc
}

// SetCheckIn sets the "check_in" field.
func (bc *BookingsCreate) SetCheckIn(s string) *BookingsCreate {
	bc.mutation.SetCheckIn(s)
	return bc
}

// SetNillableCheckIn sets the "check_in" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableCheckIn(s *string) *BookingsCreate {
	if s != nil {
		bc.SetCheckIn(*s)
	}
	return bc
}

// SetCheckOut sets the "check_out" field.
func (bc *BookingsCreate) SetCheckOut(s string) *BookingsCreate {
	bc.mutation.SetCheckOut(s)
	return bc
}

// SetNillableCheckOut sets the "check_out" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableCheckOut(s *string) *BookingsCreate {
	if s != nil {
		bc.SetCheckOut(*s)
	}
	return bc
}

// SetPickup sets the "pickup" field.
func (bc *BookingsCreate) SetPickup(b bookings.Pickup) *BookingsCreate {
	bc.mutation.SetPickup(b)
	return bc
}

// SetNillablePickup sets the "pickup" field if the given value is not nil.
func (bc *BookingsCreate) SetNillablePickup(b *bookings.Pickup) *BookingsCreate {
	if b != nil {
		bc.SetPickup(*b)
	}
	return bc
}

// SetStatus sets the "status" field.
func (bc *BookingsCreate) SetStatus(b bookings.Status) *BookingsCreate {
	bc.mutation.SetStatus(b)
	return bc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableStatus(b *bookings.Status) *BookingsCreate {
	if b != nil {
		bc.SetStatus(*b)
	}
	return bc
}

// SetPaymentStatus sets the "payment_status" field.
func (bc *BookingsCreate) SetPaymentStatus(bs bookings.PaymentStatus) *BookingsCreate {
	bc.mutation.SetPaymentStatus(bs)
	return bc
}

// SetNillablePaymentStatus sets the "payment_status" field if the given value is not nil.
func (bc *BookingsCreate) SetNillablePaymentStatus(bs *bookings.PaymentStatus) *BookingsCreate {
	if bs != nil {
		bc.SetPaymentStatus(*bs)
	}
	return bc
}

// SetSpecialRequests sets the "special_requests" field.
func (bc *BookingsCreate) SetSpecialRequests(s string) *BookingsCreate {
	bc.mutation.SetSpecialRequests(s)
	return bc
}

// SetNillableSpecialRequests sets the "special_requests" field if the given value is not nil.
func (bc *BookingsCreate) SetNillableSpecialRequests(s *string) *BookingsCreate {
	if s != nil {
		bc.SetSpecialRequests(*s)
	}
	return bc
}

// Mutation returns the BookingsMutation object of the builder.
func (bc *BookingsCreate) Mutation() *BookingsMutation {
	return bc.mutation
}

// Save creates the Bookings in the database.
func (bc *BookingsCreate) Save(ctx context.Context) (*Bookings, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookingsCreate) SaveX(ctx context.Context) *Bookings {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookingsCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookingsCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BookingsCreate) defaults() {
	if _, ok := bc.mutation.Status(); !ok {
		v := bookings.DefaultStatus
		bc.mutation.SetStatus(v)
	}
	if _, ok := bc.mutation.PaymentStatus(); !ok {
		v := bookings.DefaultPaymentStatus
		bc.mutation.SetPaymentStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookingsCreate) check() error {
	if v, ok := bc.mutation.Pickup(); ok {
		if err := bookings.PickupValidator(v); err != nil {
			return &ValidationError{Name: "pickup", err: fmt.Errorf(`ent: validator failed for field "Bookings.pickup": %w`, err)}
		}
	}
	if _, ok := bc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Bookings.status"`)}
	}
	if v, ok := bc.mutation.Status(); ok {
		if err := bookings.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Bookings.status": %w`, err)}
		}
	}
	if _, ok := bc.mutation.PaymentStatus(); !ok {
		return &ValidationError{Name: "payment_status", err: errors.New(`ent: missing required field "Bookings.payment_status"`)}
	}
	if v, ok := bc.mutation.PaymentStatus(); ok {
		if err := bookings.PaymentStatusValidator(v); err != nil {
			return &ValidationError{Name: "payment_status", err: fmt.Errorf(`ent: validator failed for field "Bookings.payment_status": %w`, err)}
		}
	}
	return nil
}

func (bc *BookingsCreate) sqlSave(ctx context.Context) (*Bookings, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BookingsCreate) createSpec() (*Bookings, *sqlgraph.CreateSpec) {
	var (
		_node = &Bookings{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bookings.Table, sqlgraph.NewFieldSpec(bookings.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.FullName(); ok {
		_spec.SetField(bookings.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := bc.mutation.Email(); ok {
		_spec.SetField(bookings.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := bc.mutation.Phone(); ok {
		_spec.SetField(bookings.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := bc.mutation.Room(); ok {
		_spec.SetField(bookings.FieldRoom, field.TypeString, value)
		_node.Room = value
	}
	if value, ok := bc.mutation.NoOfGuests(); ok {
		_spec.SetField(bookings.FieldNoOfGuests, field.TypeString, value)
		_node.NoOfGuests = value
	}
	if value, ok := bc.mutation.CheckIn(); ok {
		_spec.SetField(bookings.FieldCheckIn, field.TypeString, value)
		_node.CheckIn = value
	}
	if value, ok := bc.mutation.CheckOut(); ok {
		_spec.SetField(bookings.FieldCheckOut, field.TypeString, value)
		_node.CheckOut = value
	}
	if value, ok := bc.mutation.Pickup(); ok {
		_spec.SetField(bookings.FieldPickup, field.TypeEnum, value)
		_node.Pickup = value
	}
	if value, ok := bc.mutation.Status(); ok {
		_spec.SetField(bookings.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := bc.mutation.PaymentStatus(); ok {
		_spec.SetField(bookings.FieldPaymentStatus, field.TypeEnum, value)
		_node.PaymentStatus = value
	}
	if value, ok := bc.mutation.SpecialRequests(); ok {
		_spec.SetField(bookings.FieldSpecialRequests, field.TypeString, value)
		_node.SpecialRequests = value
	}
	return _node, _spec
}

// BookingsCreateBulk is the builder for creating many Bookings entities in bulk.
type BookingsCreateBulk struct {
	config
	err      error
	builders []*BookingsCreate
}

// Save creates the Bookings entities in the database.
func (bcb *BookingsCreateBulk) Save(ctx context.Context) ([]*Bookings, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bookings, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookingsCreateBulk) SaveX(ctx context.Context) []*Bookings {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookingsCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookingsCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

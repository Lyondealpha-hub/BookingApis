// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"andurar.api/ent/bookings"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Bookings is the model entity for the Bookings schema.
type Bookings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Room holds the value of the "room" field.
	Room string `json:"room,omitempty"`
	// NoOfGuests holds the value of the "no_of_guests" field.
	NoOfGuests string `json:"no_of_guests,omitempty"`
	// CheckIn holds the value of the "check_in" field.
	CheckIn string `json:"check_in,omitempty"`
	// CheckOut holds the value of the "check_out" field.
	CheckOut string `json:"check_out,omitempty"`
	// Pickup holds the value of the "pickup" field.
	Pickup bookings.Pickup `json:"pickup,omitempty"`
	// Status holds the value of the "status" field.
	Status bookings.Status `json:"status,omitempty"`
	// PaymentStatus holds the value of the "payment_status" field.
	PaymentStatus bookings.PaymentStatus `json:"payment_status,omitempty"`
	// SpecialRequests holds the value of the "special_requests" field.
	SpecialRequests string `json:"special_requests,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bookings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookings.FieldID:
			values[i] = new(sql.NullInt64)
		case bookings.FieldFullName, bookings.FieldEmail, bookings.FieldPhone, bookings.FieldRoom, bookings.FieldNoOfGuests, bookings.FieldCheckIn, bookings.FieldCheckOut, bookings.FieldPickup, bookings.FieldStatus, bookings.FieldPaymentStatus, bookings.FieldSpecialRequests:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bookings fields.
func (b *Bookings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case bookings.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				b.FullName = value.String
			}
		case bookings.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				b.Email = value.String
			}
		case bookings.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				b.Phone = value.String
			}
		case bookings.FieldRoom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field room", values[i])
			} else if value.Valid {
				b.Room = value.String
			}
		case bookings.FieldNoOfGuests:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field no_of_guests", values[i])
			} else if value.Valid {
				b.NoOfGuests = value.String
			}
		case bookings.FieldCheckIn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field check_in", values[i])
			} else if value.Valid {
				b.CheckIn = value.String
			}
		case bookings.FieldCheckOut:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field check_out", values[i])
			} else if value.Valid {
				b.CheckOut = value.String
			}
		case bookings.FieldPickup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pickup", values[i])
			} else if value.Valid {
				b.Pickup = bookings.Pickup(value.String)
			}
		case bookings.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = bookings.Status(value.String)
			}
		case bookings.FieldPaymentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field payment_status", values[i])
			} else if value.Valid {
				b.PaymentStatus = bookings.PaymentStatus(value.String)
			}
		case bookings.FieldSpecialRequests:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field special_requests", values[i])
			} else if value.Valid {
				b.SpecialRequests = value.String
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bookings.
// This includes values selected through modifiers, order, etc.
func (b *Bookings) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Bookings.
// Note that you need to call Bookings.Unwrap() before calling this method if this Bookings
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bookings) Update() *BookingsUpdateOne {
	return NewBookingsClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bookings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bookings) Unwrap() *Bookings {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bookings is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bookings) String() string {
	var builder strings.Builder
	builder.WriteString("Bookings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("full_name=")
	builder.WriteString(b.FullName)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(b.Email)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(b.Phone)
	builder.WriteString(", ")
	builder.WriteString("room=")
	builder.WriteString(b.Room)
	builder.WriteString(", ")
	builder.WriteString("no_of_guests=")
	builder.WriteString(b.NoOfGuests)
	builder.WriteString(", ")
	builder.WriteString("check_in=")
	builder.WriteString(b.CheckIn)
	builder.WriteString(", ")
	builder.WriteString("check_out=")
	builder.WriteString(b.CheckOut)
	builder.WriteString(", ")
	builder.WriteString("pickup=")
	builder.WriteString(fmt.Sprintf("%v", b.Pickup))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", ")
	builder.WriteString("payment_status=")
	builder.WriteString(fmt.Sprintf("%v", b.PaymentStatus))
	builder.WriteString(", ")
	builder.WriteString("special_requests=")
	builder.WriteString(b.SpecialRequests)
	builder.WriteByte(')')
	return builder.String()
}

// BookingsSlice is a parsable slice of Bookings.
type BookingsSlice []*Bookings

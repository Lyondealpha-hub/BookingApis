// Code generated by ent, DO NOT EDIT.

package bookings

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the bookings type in the database.
	Label = "bookings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldRoom holds the string denoting the room field in the database.
	FieldRoom = "room"
	// FieldNoOfGuests holds the string denoting the no_of_guests field in the database.
	FieldNoOfGuests = "no_of_guests"
	// FieldCheckIn holds the string denoting the check_in field in the database.
	FieldCheckIn = "check_in"
	// FieldCheckOut holds the string denoting the check_out field in the database.
	FieldCheckOut = "check_out"
	// FieldPickup holds the string denoting the pickup field in the database.
	FieldPickup = "pickup"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPaymentStatus holds the string denoting the payment_status field in the database.
	FieldPaymentStatus = "payment_status"
	// FieldSpecialRequests holds the string denoting the special_requests field in the database.
	FieldSpecialRequests = "special_requests"
	// Table holds the table name of the bookings in the database.
	Table = "bookings"
)

// Columns holds all SQL columns for bookings fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldEmail,
	FieldPhone,
	FieldRoom,
	FieldNoOfGuests,
	FieldCheckIn,
	FieldCheckOut,
	FieldPickup,
	FieldStatus,
	FieldPaymentStatus,
	FieldSpecialRequests,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Pickup defines the type for the "pickup" enum field.
type Pickup string

// Pickup values.
const (
	PickupYes Pickup = "yes"
	PickupNo  Pickup = "no"
)

func (pi Pickup) String() string {
	return string(pi)
}

// PickupValidator is a validator for the "pickup" field enum values. It is called by the builders before save.
func PickupValidator(pi Pickup) error {
	switch pi {
	case PickupYes, PickupNo:
		return nil
	default:
		return fmt.Errorf("bookings: invalid enum value for pickup field: %q", pi)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusConfirmed Status = "confirmed"
	StatusPending   Status = "pending"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusConfirmed, StatusPending:
		return nil
	default:
		return fmt.Errorf("bookings: invalid enum value for status field: %q", s)
	}
}

// PaymentStatus defines the type for the "payment_status" enum field.
type PaymentStatus string

// PaymentStatusPending is the default value of the PaymentStatus enum.
const DefaultPaymentStatus = PaymentStatusPending

// PaymentStatus values.
const (
	PaymentStatusPaid    PaymentStatus = "paid"
	PaymentStatusPending PaymentStatus = "pending"
)

func (ps PaymentStatus) String() string {
	return string(ps)
}

// PaymentStatusValidator is a validator for the "payment_status" field enum values. It is called by the builders before save.
func PaymentStatusValidator(ps PaymentStatus) error {
	switch ps {
	case PaymentStatusPaid, PaymentStatusPending:
		return nil
	default:
		return fmt.Errorf("bookings: invalid enum value for payment_status field: %q", ps)
	}
}

// OrderOption defines the ordering options for the Bookings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByRoom orders the results by the room field.
func ByRoom(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoom, opts...).ToFunc()
}

// ByNoOfGuests orders the results by the no_of_guests field.
func ByNoOfGuests(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNoOfGuests, opts...).ToFunc()
}

// ByCheckIn orders the results by the check_in field.
func ByCheckIn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckIn, opts...).ToFunc()
}

// ByCheckOut orders the results by the check_out field.
func ByCheckOut(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCheckOut, opts...).ToFunc()
}

// ByPickup orders the results by the pickup field.
func ByPickup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPickup, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPaymentStatus orders the results by the payment_status field.
func ByPaymentStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentStatus, opts...).ToFunc()
}

// BySpecialRequests orders the results by the special_requests field.
func BySpecialRequests(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecialRequests, opts...).ToFunc()
}
